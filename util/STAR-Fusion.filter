#!/usr/bin/env perl

use strict;
use warnings;
use Carp;
use FindBin;
use lib ("$FindBin::Bin/../PerlLib");
use Fasta_reader;
use Getopt::Long qw(:config posix_default no_ignore_case bundling pass_through);                                                 
use TiedHash;
use Process_cmd;
use File::Basename;
use Pipeliner;
use DelimParser;
use FusionEM;

my $tmpdir = "/tmp";

my $MIN_NOVEL_JUNCTION_SUPPORT = 3;
my $MIN_ALT_PCT_JUNCTION = 10;
my $AGGREGATE_NOVEL_JUNCTION_DIST = 5;

my $MIN_JUNCTION_READS = 0;
my $MIN_SUM_FRAGS = 2;
my $MIN_SPANNING_FRAGS_ONLY = 5;

my $MAX_PROMISCUITY = 10;
my $MIN_PCT_DOM_PROM = 20;

my $REQUIRE_LDAS = 1;

my $usage = <<__EOUSAGE__;

###################################################################################################
#
# Required:
#
#  --fusion_preds <string>        preliminary fusion predictions
#                                 Required formatting is:  
#                                 geneA--geneB (tab) junction_read_count (tab) spanning_read_count (tab) ... rest
#
#  --chimeric_junction|J <string>        Chimeric.out.junction file
#
#  --out_prefix <string>          prefix for output filename (will tack on .final and .final.abridged)
#
#  --genome_lib_dir <string>      genome lib directory for FusionFilter
#
# Optional: 
#
#  --tmpdir <string>              file for temporary files (default: $tmpdir)
#
#  --min_junction_reads <int>            minimum number of junction-spanning reads required. Default: $MIN_JUNCTION_READS
#
#  --min_sum_frags <int>                 minimum fusion support = ( # junction_reads + # spanning_frags ) Default: $MIN_SUM_FRAGS
#
#  --min_spanning_frags_only <int>        minimum number of rna-seq fragments required as fusion evidence if
#                                          there are no junction reads (default: $MIN_SPANNING_FRAGS_ONLY)
#
#  --require_LDAS 0|1                    require long double anchor support for split reads                 
#                                           when no spanning frags are found (default: 1)                   
#
#
#  --min_novel_junction_support <int>    default: $MIN_NOVEL_JUNCTION_SUPPORT  (minimum of $MIN_NOVEL_JUNCTION_SUPPORT junction reads required if breakpoint
#                                                        lacks involvement of only reference junctions)
#
#  --min_alt_pct_junction <float>        default: $MIN_ALT_PCT_JUNCTION  ($MIN_ALT_PCT_JUNCTION % of the dominant isoform junction support)
#
#  --max_promiscuity <int>               maximum number of partners allowed for a given fusion. Default: $MAX_PROMISCUITY
#
#  --min_pct_dom_promiscuity <int>       for promiscuous fusions, those with less than this support of the dominant scoring pair
#                                        are filtered prior to applying the max_promiscuity filter.
#                                        (default: $MIN_PCT_DOM_PROM)
#
#  --aggregate_novel_junction_dist <int>  default: $AGGREGATE_NOVEL_JUNCTION_DIST (non-ref junctions within $AGGREGATE_NOVEL_JUNCTION_DIST are merged into single calls)
#
####################################################################################################


__EOUSAGE__

    ;

my $help_flag;

my $fusion_preds_file;
my $out_prefix;
my $genome_lib_dir;
my $chimeric_out_junctions_file;


&GetOptions ( 'h' => \$help_flag, 
              
              'fusion_preds=s' => \$fusion_preds_file,
              'chimeric_junction|J=s' => \$chimeric_out_junctions_file,
                            
              'out_prefix=s' => \$out_prefix,

              'tmpdir=s' => \$tmpdir,
              
              'min_novel_junction_support=i' => \$MIN_NOVEL_JUNCTION_SUPPORT,
              'min_alt_pct_junction=f' => \$MIN_ALT_PCT_JUNCTION,
              'aggregate_novel_junction_dist=i' => \$AGGREGATE_NOVEL_JUNCTION_DIST,

              'min_junction_reads=i' => \$MIN_JUNCTION_READS,
              'min_sum_frags=i' => \$MIN_SUM_FRAGS,
              'min_spanning_frags_only=i' => \$MIN_SPANNING_FRAGS_ONLY,
              
              'require_LDAS=i' => \$REQUIRE_LDAS,
              
              'max_promiscuity=i' => \$MAX_PROMISCUITY,
              'min_pct_dom_promiscuity=i' => \$MIN_PCT_DOM_PROM,
              
              'genome_lib_dir=s' => \$genome_lib_dir,
              
              
              
    );

if (@ARGV) {
    die "Error, dont recognize arguments: @ARGV";
}


if ($help_flag) {
    die $usage;
}

unless ($fusion_preds_file && $genome_lib_dir && $out_prefix && $chimeric_out_junctions_file) {
    die $usage;
}

$fusion_preds_file = &ensure_full_path($fusion_preds_file);

$out_prefix = &ensure_full_path($out_prefix);

############################################################
## Need AnnotFilterRule for organism-specific exceptions to filtering rules based on genes
my $annot_filt_module = "$genome_lib_dir/AnnotFilterRule.pm";
unless (-s $annot_filt_module) {
    die "Error, cannot locate required $annot_filt_module  ... be sure to use a more modern version of the companion CTAT_GENOME_LIB ";
}

require $annot_filt_module;
############################################################


main: {

    my $out_prefix_basename = basename($out_prefix);
    my $intermediates_dir = "$out_prefix.filter.intermediates_dir";
    unless (-d $intermediates_dir) {
        &process_cmd("mkdir -p $intermediates_dir");
    }
    my $intermediates_out_prefix = "$intermediates_dir/$out_prefix_basename";

    my $stage1_preds_file = "$intermediates_out_prefix.pre_blast_filter";
    open (my $stage1_ofh, ">$stage1_preds_file") or die "Error, cannot write to $stage1_preds_file";
    
    my $filter_info_file = "$stage1_preds_file.filt_info";
    open (my $filter_ofh, ">$filter_info_file") or die "Error, cannot write to $filter_info_file";
    
    my @fusions;
    open (my $fh, $fusion_preds_file) or die "Error, cannot open file $fusion_preds_file";
    
    my $tab_reader = new DelimParser::Reader($fh, "\t");
    
    while (my $row = $tab_reader->get_row()) {
        
        my $fusion_name = $row->{'#FusionName'};
        my $J = $row->{JunctionReadCount};
        my $S = $row->{SpanningFragCount};
        my $splice_type = $row->{SpliceType};
        my $geneA = $row->{LeftGene};
        my $brkptA = $row->{LeftBreakpoint};
        my $geneB = $row->{RightGene};
        my $brkptB = $row->{RightBreakpoint};
        my $junction_reads = $row->{JunctionReads};
        my $spanning_frags = $row->{SpanningFrags};
        my $long_double_anchor_support = $row->{LargeAnchorSupport};
        
                
        #TODO: use keys that match the column headers for sanity sake
        my $fusion = { fusion_name => $fusion_name,
                       
                       splice_type => $splice_type,
                       
                       J => $J,
                       S => $S,
                       
                       geneA => $geneA,
                       geneB => $geneB,
                       
                       brkptA => $brkptA,
                       brkptB => $brkptB,
                       
                       junction_reads => $junction_reads,
                       spanning_frags => $spanning_frags,
                       
                       ldas => $long_double_anchor_support,

                       score => undef, # assigned below
                       
                       row => $row,
        };

        &score_fusion($fusion);
        
        push (@fusions, $fusion); 
    }

    my @column_headers = $tab_reader->get_column_headers();
    @column_headers = (@column_headers[0..2], "est_J", "est_S", @column_headers[3..$#column_headers]);
    
    my @filter_col_headers = (@column_headers[0..2], "est_J", "est_S", @column_headers[3..$#column_headers], "Note");
    my $filter_tab_writer = new DelimParser::Writer($filter_ofh, "\t", \@filter_col_headers);
    my $stage1_tab_writer = new DelimParser::Writer($stage1_ofh, "\t", \@column_headers);
    
    @fusions = reverse sort {$a->{score} <=> $b->{score}
                             ||
                                 $a->{brkptA} cmp $b->{brkptA}  # need deterministic ordering
                             ||
                                 $a->{brkptB} cmp $b->{brkptB} } @fusions;
    
    @fusions = &merge_neighboring_nonref_splice(\@fusions, $filter_tab_writer);

    @fusions = reverse sort {$a->{score} <=> $b->{score} 
                             ||
                                 $a->{brkptA} cmp $b->{brkptA}  # need deterministic ordering
                             ||
                                 $a->{brkptB} cmp $b->{brkptB} } @fusions;
    
    
    my %read_mapping_counts = &parse_read_mapping_counts($chimeric_out_junctions_file);
    

    #############################################
    ## removing fusions with insufficient support.
    
    &EM_assign_reads_and_penalize_multimaps(\@fusions, \%read_mapping_counts, $intermediates_out_prefix);
    
    @fusions = reverse sort {$a->{score} <=> $b->{score} 
                             ||
                                 $a->{brkptA} cmp $b->{brkptA} # need deterministic ordering
                             ||
                                 $a->{brkptB} cmp $b->{brkptB} } @fusions;
    
    @fusions = &remove_fusions_with_insufficient_support(\@fusions, $filter_tab_writer, 
                                                         $MIN_JUNCTION_READS, $MIN_SUM_FRAGS,
                                                         $MIN_SPANNING_FRAGS_ONLY);
    

    
    #################################
    ## removing minor nonref isoforms

    &EM_assign_reads_and_penalize_multimaps(\@fusions, \%read_mapping_counts, $intermediates_out_prefix);
    
    @fusions = reverse sort {$a->{score} <=> $b->{score} 
                             ||
                                 $a->{brkptA} cmp $b->{brkptA} # need deterministic ordering
                             ||
                                 $a->{brkptB} cmp $b->{brkptB} } @fusions;


    @fusions = &remove_minor_nonref_isoforms(\@fusions, $filter_tab_writer);


    
    foreach my $fusion (@fusions) {
        # regenerating 'line' here, since merged entries will now have updated stats.        
        
        my %row = %{$fusion->{row}}; # init to initial info
        
        # now update it
        
        ## and readjust the fusion read counts based on what remains assigned.
        
        my $junction_read_count = 0;
        my $junction_reads = $fusion->{junction_reads};
        if ($junction_reads ne ".") {
            $junction_read_count = scalar(split(/,/, $junction_reads));
        }

        my $spanning_frag_count = 0;
        my $spanning_frags = $fusion->{spanning_frags};
        if ($spanning_frags ne ".") {
            $spanning_frag_count = scalar(split(/,/, $spanning_frags));
        }
        

        my %rowadj = ('#FusionName' => $fusion->{fusion_name}, 
                      'JunctionReadCount' => $junction_read_count,
                      'SpanningFragCount' => $spanning_frag_count,
                      'SpliceType' => $fusion->{splice_type},
                      'LeftGene' => $fusion->{geneA}, 
                      'LeftBreakpoint' => $fusion->{brkptA}, 
                      'RightGene' => $fusion->{geneB}, 
                      'RightBreakpoint' => $fusion->{brkptB},
                      'JunctionReads' => $junction_reads,
                      'SpanningFrags' => $spanning_frags,
                      'LargeAnchorSupport' => $fusion->{ldas},
                      'est_J' => $fusion->{est_J},
                      'est_S' => $fusion->{est_S},
            );
        
        # now update original row.
        foreach my $key (keys %rowadj) {
            $row{$key} = $rowadj{$key};
        }
        

        $stage1_tab_writer->write_row(\%row);
            
            $row{Note} = "Retained";
            $filter_tab_writer->write_row(\%row);
    }

    close $filter_ofh;
    close $stage1_ofh;
    
    ## Run the blast and promiscuity filter
    my $cmd = "$FindBin::Bin/../FusionFilter/blast_and_promiscuity_filter.pl --out_prefix $intermediates_out_prefix --max_promiscuity $MAX_PROMISCUITY --min_pct_dom_promiscuity $MIN_PCT_DOM_PROM  --fusion_preds $stage1_preds_file --genome_lib_dir $genome_lib_dir ";
    &process_cmd($cmd);  # generates $intermediates_out_prefix.post_blast_and_promiscuity_filter 

    # make abridged versions:
    &process_cmd("$FindBin::Bin/column_exclusions.pl $intermediates_out_prefix.post_blast_and_promiscuity_filter JunctionReads,SpanningFrags > $intermediates_out_prefix.post_blast_and_promiscuity_filter.abridged");

    # rename final output file:
    &process_cmd("ln -sf $intermediates_out_prefix.post_blast_and_promiscuity_filter $out_prefix.fusion_candidates.preliminary.filtered");
    
    
    exit(0);
}

        
####
sub merge_neighboring_nonref_splice {
    my ($fusions_aref, $filter_tab_writer) = @_;

    my @ret_fusions;

    my %fusion_name_to_nonref_splice;

    foreach my $fusion (@$fusions_aref) {
        
        if ($fusion->{splice_type} eq "INCL_NON_REF_SPLICE") {
            my $fusion_name = $fusion->{fusion_name};
            push (@{$fusion_name_to_nonref_splice{$fusion_name}}, $fusion);
        }
        else {
            push (@ret_fusions, $fusion);
        }
    }

    foreach my $fusion_list_aref (values %fusion_name_to_nonref_splice) {
        
        my @nonref_fusions = @$fusion_list_aref;
        
        @nonref_fusions = reverse sort {$a->{score}<=>$b->{score}} @nonref_fusions;

        
        do {
        
            my $top_fusion = shift @nonref_fusions;
            
            my @remaining_fusions;
            foreach my $f (@nonref_fusions) {
                if (&fusions_within_range($top_fusion, $f, $AGGREGATE_NOVEL_JUNCTION_DIST)) {
                    my %row = %{$f->{row}};
                    $row{Note} = "Merged"; # TODO: add more info here about how it was done.
                    $row{'#FusionName'} = '#' . $row{'#FusionName'};
                    $filter_tab_writer->write_row(\%row);
                    
                    $top_fusion = &merge_fusions($top_fusion, $f);
                    
                    
                }
                else {
                    push (@remaining_fusions, $f);
                }
            }

            @nonref_fusions = @remaining_fusions;
            
            push (@ret_fusions, $top_fusion);
            
        } while (@nonref_fusions);
        

    }

    return(@ret_fusions);
}


####
sub fusions_within_range {
    my ($fusionA, $fusionB, $max_dist) = @_;

    my @pts_A_left = split(/:/, $fusionA->{brkptA});
    my $coordA_left = $pts_A_left[-2];
    
    my @pts_A_right = split(/:/, $fusionA->{brkptB});
    my $coordA_right = $pts_A_right[-2];

    my @pts_B_left = split(/:/, $fusionB->{brkptA});
    my $coordB_left = $pts_B_left[-2];

    my @pts_B_right = split(/:/, $fusionB->{brkptB});
    my $coordB_right = $pts_B_right[-2];
    
    
    if ( abs($coordA_left - $coordB_left) <= $max_dist

         &&

         abs($coordA_right - $coordB_right) <= $max_dist ) {

        # within range
        return(1); # yes
    }

    else {

        return(0); # no
    }

}


####
sub merge_fusions {
    my ($fusion_keep, $fusion_subsume) = @_;

    my %junction_reads;
    foreach my $junction_read_list ($fusion_keep->{junction_reads}, $fusion_subsume->{junction_reads}) {

        my @juncs = split(/,/, $junction_read_list);
        foreach my $j (@juncs) {
            unless ($j eq ".") {
                $junction_reads{$j} = 1;
            }
        }
    }

    my %spanning_frags;
    foreach my $span_frag_list ($fusion_keep->{spanning_frags}, $fusion_subsume->{spanning_frags}) {

        my @spans = split(/,/, $span_frag_list);
        
        foreach my $span (@spans) {
            if ($span ne '.' && ! exists $junction_reads{$span}) {
                $spanning_frags{$span} = 1;
            }
        }
    }

    unless ($fusion_keep->{ldas} =~ /YES/i) {
        $fusion_keep->{ldas} = $fusion_subsume->{ldas};
    }
    
    my @new_junc_read_list = keys %junction_reads;
    my @new_span_frag_list = keys %spanning_frags;

    my $new_count_junc_reads = scalar(@new_junc_read_list);
    my $new_count_span_frags = scalar(@new_span_frag_list);

    $fusion_keep->{J} = $new_count_junc_reads;
    $fusion_keep->{S} = $new_count_span_frags;

    $fusion_keep->{junction_reads} = join(",", @new_junc_read_list) || ".";
    $fusion_keep->{spanning_frags} = join(",", @new_span_frag_list) || ".";
    
    &score_fusion($fusion_keep);
    
    return($fusion_keep);
}


####
sub remove_minor_nonref_isoforms {
    my ($fusions_aref, $filter_tab_writer) = @_;
    
    my @fusions = reverse sort { $a->{J}<=>$b->{J} 
                                 ||
                                     $a->{S} <=> $b->{S} } @$fusions_aref;
    
    my %dominant_isoform_junc_support;
    my @ret_fusions;
    
    my %seen;
    
    foreach my $fusion (@fusions) {
        
        my $fusion_name = $fusion->{fusion_name};
        my $junction_support = $fusion->{J};
        my $span_support = $fusion->{S};
        
        # in case we filter
        my %row = %{$fusion->{row}};
        $row{'#FusionName'} = '#' . $row{'#FusionName'};
        
        my $dominant_isoform_support = $dominant_isoform_junc_support{$fusion_name};
        if (defined $dominant_isoform_support && $dominant_isoform_support > 0) {
            
            my $pct_dom_iso_support = $junction_support / $dominant_isoform_support * 100;
            if ($pct_dom_iso_support < $MIN_ALT_PCT_JUNCTION) {
                $row{Note} = "FILTERED DUE TO ONLY $pct_dom_iso_support % of dominant isoform support ($dominant_isoform_support)";
                $filter_tab_writer->write_row(\%row);
                next; 
            }
            
        }
        
        else {
            $dominant_isoform_junc_support{$fusion_name} = $junction_support;
        }
        
    
        push (@ret_fusions, $fusion); # it's a keeper.
        
        $seen{$fusion_name} = 1;
        
    }
    
    
    return(@ret_fusions);
}

####
sub remove_fusions_with_insufficient_support {
    my ($fusions_aref, $filter_tab_writer, $min_J, $min_sum, $min_spanning_frags_only) = @_;

    my @ret_fusions;

    foreach my $fusion (@$fusions_aref) {
        
        my $fusion_name = $fusion->{fusion_name};
        
        my $splice_type = $fusion->{splice_type};

        my $sum = $fusion->{est_J} + $fusion->{est_S};
        
        # in case it gets filtered
        my %row = %{$fusion->{row}};
        $row{est_J} = $fusion->{est_J}; # these weren't in the original row, so we need to add them here.
        $row{est_S} = $fusion->{est_S};
        $row{'#FusionName'} = '#' . $row{'#FusionName'};
        
        if ($sum < $min_sum) {
            $row{Note} = "FILTERED DUE TO sum_support($sum) < min_support_required:$min_sum";
            $filter_tab_writer->write_row(\%row);
            next;
        }


        if ($splice_type eq 'INCL_NON_REF_SPLICE' && $fusion->{est_J} < $MIN_NOVEL_JUNCTION_SUPPORT) { 
            # skip it
            $row{Note} = "FILTERED DUE TO *novel* junction support $fusion->{J} < $MIN_NOVEL_JUNCTION_SUPPORT";
            $filter_tab_writer->write_row(\%row);
            next; 
        }

        
        if ($fusion->{est_J} < $min_J && ! &AnnotFilterRule::fusion_has_junction_reads_exception($fusion_name) ) {
            # skip it
            $row{Note} = "FILTERED DUE TO junction read support ($fusion->{J}) < $min_J";
            $filter_tab_writer->write_row(\%row);
            next;
        }
        
        if ($fusion->{est_J} < 1 && $fusion->{est_S} < $min_spanning_frags_only) {
            $row{Note} = "FILTERED DUE TO only spanning reads and num spanning frags $fusion->{S} < $min_spanning_frags_only";
            $filter_tab_writer->write_row(\%row);
            next;
        }
        
        if ($fusion->{est_S} < 1 && $REQUIRE_LDAS && $fusion->{ldas} !~ /YES/i) {
            $row{Note} = "FILTERED DUE TO no spanning reads and no long double anchor support at breakpoint";
            $filter_tab_writer->write_row(\%row);
            next;
        }
        

        # passed requirements.
        
        push (@ret_fusions, $fusion);

    }

    return(@ret_fusions);
}

####
sub score_fusion {
    my ($fusion) = @_;

    ## preferably use the estimated values.

    my $J = defined($fusion->{est_J}) ? $fusion->{est_J} : $fusion->{J};
    my $S = defined($fusion->{est_S}) ? $fusion->{est_S} : $fusion->{S};
    
    my $score = $J*4 + $S;
    
    $fusion->{score} = $score;
}



####
sub parse_read_mapping_counts {
    my ($chimeric_junctions_file) = @_;

    my %read_counts;
    
    open(my $fh, $chimeric_junctions_file) or die "Error, cannot open file $chimeric_junctions_file";
    while (<$fh>) {
        if (/^\#/) { next; }
        chomp;
        my @x = split(/\t/);
        my $read_name = $x[9];
        my $read_group = $x[$#x];

        if ($read_group =~ /^\D/ && $read_group ne "GRPundef") {
            # backwards compatible w/ older STAR
            $read_name = "\&${read_group}\@${read_name}"; # sample name encoding
        }
        $read_counts{$read_name}++;
    }
    close $fh;
    
    return(%read_counts);
    
}

sub EM_assign_reads_and_penalize_multimaps {
    my ($fusions_aref, $read_mapping_counts_href, $outfile_prefix) = @_;
    
    my $fusion_em = new FusionEM();
    
    foreach my $fusion (@$fusions_aref) {
        
        my ($fusion_name, $left_breakpoint, $right_breakpoint) = ($fusion->{fusion_name}, $fusion->{brkptA}, $fusion->{brkptB});
        
        $fusion_name .= "::" . $left_breakpoint . "::" . $right_breakpoint;
        
        $fusion->{fusion_isoform_name} = $fusion_name;

        ## penalize multimapping reads
        my $junction_reads_string = $fusion->{junction_reads};
        my @junction_reads;
        if ($junction_reads_string ne '.') {
            foreach my $junction_read (split(/,/, $junction_reads_string)) {
                $junction_read =~ s|/[12]$||;
                push (@junction_reads, $junction_read);
            }
        }
        
        my $spanning_frags_string = $fusion->{spanning_frags};
        my @spanning_frags;
        if ($spanning_frags_string ne '.') {
            push(@spanning_frags, split(/,/, $spanning_frags_string));
        }
        
        $fusion_em->add_fusion_transcript($fusion_name, \@junction_reads, \@spanning_frags);
        
    }
    
    $fusion_em->run();


    foreach my $fusion (@$fusions_aref) { 
        my $fusion_isoform_name = $fusion->{fusion_isoform_name};
        my ($est_J, $est_S) = $fusion_em->get_fusion_estimated_J_S($fusion_isoform_name);
        $fusion->{est_J} = $est_J;
        $fusion->{est_S} = $est_S;
        
        # rescore it using the estimated J,S values.
        &score_fusion($fusion);
        
    }

    return;
}

